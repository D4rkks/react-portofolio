{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dark\\\\Desktop\\\\port\\\\portfolio\\\\src\\\\components\\\\pt\\\\CardSlider.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./CardSlider.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardSlider = () => {\n  _s();\n  const cards = [\"React\", \"JavaScript\", \"HTML\", \"CSS\", \"Git\", \"Node.js\"];\n  const [offset, setOffset] = useState(0);\n  const cardWidth = 200; // Largura de cada card\n  const totalWidth = cards.length * cardWidth; // Largura total dos cards\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setOffset(prevOffset => {\n        const nextOffset = prevOffset + cardWidth; // Mova para a esquerda\n        return nextOffset >= cardWidth ? nextOffset % totalWidth : nextOffset; // Reinicie após o primeiro card sair\n      });\n    }, 2000); // Tempo do intervalo de transição\n\n    return () => clearInterval(interval); // Limpa o intervalo ao desmontar o componente\n  }, [totalWidth, cardWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slider-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      style: {\n        transform: `translateX(-${offset}px)`,\n        transition: \"transform 0.5s ease\" // Suaviza a transição\n      },\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slide\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      style: {\n        transform: `translateX(-${offset}px)`,\n        position: \"absolute\",\n        // Mantém o segundo conjunto no mesmo lugar\n        top: 0,\n        left: `${totalWidth}px`,\n        // Coloca o segundo conjunto à direita\n        transition: \"none\" // Sem transição para o segundo conjunto\n      },\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slide\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)\n      }, `dup-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(CardSlider, \"WzXr9uhGfXxPyY3YDt08E2OJQzY=\");\n_c = CardSlider;\nexport default CardSlider;\nvar _c;\n$RefreshReg$(_c, \"CardSlider\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CardSlider","_s","cards","offset","setOffset","cardWidth","totalWidth","length","interval","setInterval","prevOffset","nextOffset","clearInterval","className","children","style","transform","transition","map","card","index","fileName","_jsxFileName","lineNumber","columnNumber","position","top","left","_c","$RefreshReg$"],"sources":["C:/Users/dark/Desktop/port/portfolio/src/components/pt/CardSlider.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./CardSlider.css\";\r\n\r\nconst CardSlider = () => {\r\n    const cards = [\"React\", \"JavaScript\", \"HTML\", \"CSS\", \"Git\", \"Node.js\"];\r\n    const [offset, setOffset] = useState(0);\r\n    const cardWidth = 200; // Largura de cada card\r\n    const totalWidth = cards.length * cardWidth; // Largura total dos cards\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setOffset((prevOffset) => {\r\n                const nextOffset = prevOffset + cardWidth; // Mova para a esquerda\r\n                return nextOffset >= cardWidth ? nextOffset % totalWidth : nextOffset; // Reinicie após o primeiro card sair\r\n            });\r\n        }, 2000); // Tempo do intervalo de transição\r\n\r\n        return () => clearInterval(interval); // Limpa o intervalo ao desmontar o componente\r\n    }, [totalWidth, cardWidth]);\r\n\r\n    return (\r\n        <div className=\"slider-container\">\r\n            <div\r\n                className=\"slider\"\r\n                style={{\r\n                    transform: `translateX(-${offset}px)`,\r\n                    transition: \"transform 0.5s ease\", // Suaviza a transição\r\n                }}\r\n            >\r\n                {cards.map((card, index) => (\r\n                    <div className=\"slide\" key={index}>\r\n                        <h3>{card}</h3>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div\r\n                className=\"slider\"\r\n                style={{\r\n                    transform: `translateX(-${offset}px)`,\r\n                    position: \"absolute\", // Mantém o segundo conjunto no mesmo lugar\r\n                    top: 0,\r\n                    left: `${totalWidth}px`, // Coloca o segundo conjunto à direita\r\n                    transition: \"none\", // Sem transição para o segundo conjunto\r\n                }}\r\n            >\r\n                {cards.map((card, index) => (\r\n                    <div className=\"slide\" key={`dup-${index}`}>\r\n                        <h3>{card}</h3>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardSlider;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC;EACtE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAMQ,SAAS,GAAG,GAAG,CAAC,CAAC;EACvB,MAAMC,UAAU,GAAGJ,KAAK,CAACK,MAAM,GAAGF,SAAS,CAAC,CAAC;;EAE7CT,SAAS,CAAC,MAAM;IACZ,MAAMY,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BL,SAAS,CAAEM,UAAU,IAAK;QACtB,MAAMC,UAAU,GAAGD,UAAU,GAAGL,SAAS,CAAC,CAAC;QAC3C,OAAOM,UAAU,IAAIN,SAAS,GAAGM,UAAU,GAAGL,UAAU,GAAGK,UAAU,CAAC,CAAC;MAC3E,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMC,aAAa,CAACJ,QAAQ,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACF,UAAU,EAAED,SAAS,CAAC,CAAC;EAE3B,oBACIN,OAAA;IAAKc,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC7Bf,OAAA;MACIc,SAAS,EAAC,QAAQ;MAClBE,KAAK,EAAE;QACHC,SAAS,EAAE,eAAeb,MAAM,KAAK;QACrCc,UAAU,EAAE,qBAAqB,CAAE;MACvC,CAAE;MAAAH,QAAA,EAEDZ,KAAK,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACnBrB,OAAA;QAAKc,SAAS,EAAC,OAAO;QAAAC,QAAA,eAClBf,OAAA;UAAAe,QAAA,EAAKK;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC,GADSJ,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE5B,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNzB,OAAA;MACIc,SAAS,EAAC,QAAQ;MAClBE,KAAK,EAAE;QACHC,SAAS,EAAE,eAAeb,MAAM,KAAK;QACrCsB,QAAQ,EAAE,UAAU;QAAE;QACtBC,GAAG,EAAE,CAAC;QACNC,IAAI,EAAE,GAAGrB,UAAU,IAAI;QAAE;QACzBW,UAAU,EAAE,MAAM,CAAE;MACxB,CAAE;MAAAH,QAAA,EAEDZ,KAAK,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACnBrB,OAAA;QAAKc,SAAS,EAAC,OAAO;QAAAC,QAAA,eAClBf,OAAA;UAAAe,QAAA,EAAKK;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC,GADS,OAAOJ,KAAK,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAErC,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACvB,EAAA,CAlDID,UAAU;AAAA4B,EAAA,GAAV5B,UAAU;AAoDhB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}