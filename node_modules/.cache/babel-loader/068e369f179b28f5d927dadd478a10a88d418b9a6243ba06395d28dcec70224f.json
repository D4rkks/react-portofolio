{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dark\\\\Desktop\\\\port\\\\portfolio\\\\src\\\\components\\\\pt\\\\CardSlider.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./CardSlider.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CardSlider = () => {\n  _s();\n  const cards = [\"React\", \"JavaScript\", \"HTML\", \"CSS\", \"Git\", \"Node.js\"];\n  const [offset, setOffset] = useState(0);\n  const [transitioning, setTransitioning] = useState(true); // Novo estado para controle de transição\n  const cardWidth = 200; // Defina a largura de cada card\n  const totalCards = cards.length; // Número total de cards\n\n  // Duplicar os cards para efeito de loop infinito\n  const duplicatedCards = [...cards, ...cards];\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setOffset(prevOffset => {\n        const nextOffset = prevOffset + cardWidth; // Mova 200px para a esquerda\n        // Se o próximo offset ultrapassa a largura dos cards, redefine\n        if (nextOffset >= cardWidth * totalCards) {\n          setTransitioning(false); // Interrompe a transição\n          setTimeout(() => {\n            setOffset(0); // Reseta para 0 após um breve atraso\n            setTransitioning(true); // Retorna a transição\n          }, 500); // Tempo igual ao da transição\n          return prevOffset; // Mantém o offset anterior\n        }\n        return nextOffset;\n      });\n    }, 2000); // Tempo do intervalo de transição\n\n    return () => clearInterval(interval); // Limpa o intervalo ao desmontar o componente\n  }, [totalCards, cardWidth]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"slider-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider\",\n      style: {\n        transform: `translateX(-${offset}px)`,\n        transition: transitioning ? \"transform 0.5s ease-in-out\" : \"none\",\n        // Controla a transição\n        width: `${cardWidth * duplicatedCards.length}px` // Largura total dos cards duplicados\n      },\n      children: duplicatedCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slide\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: card\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(CardSlider, \"+uqmkGlruT8YQP8qmi6DNcCPpWY=\");\n_c = CardSlider;\nexport default CardSlider;\nvar _c;\n$RefreshReg$(_c, \"CardSlider\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","CardSlider","_s","cards","offset","setOffset","transitioning","setTransitioning","cardWidth","totalCards","length","duplicatedCards","interval","setInterval","prevOffset","nextOffset","setTimeout","clearInterval","className","children","style","transform","transition","width","map","card","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dark/Desktop/port/portfolio/src/components/pt/CardSlider.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./CardSlider.css\";\r\n\r\nconst CardSlider = () => {\r\n    const cards = [\"React\", \"JavaScript\", \"HTML\", \"CSS\", \"Git\", \"Node.js\"];\r\n    const [offset, setOffset] = useState(0);\r\n    const [transitioning, setTransitioning] = useState(true); // Novo estado para controle de transição\r\n    const cardWidth = 200; // Defina a largura de cada card\r\n    const totalCards = cards.length; // Número total de cards\r\n\r\n    // Duplicar os cards para efeito de loop infinito\r\n    const duplicatedCards = [...cards, ...cards];\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setOffset((prevOffset) => {\r\n                const nextOffset = prevOffset + cardWidth; // Mova 200px para a esquerda\r\n                // Se o próximo offset ultrapassa a largura dos cards, redefine\r\n                if (nextOffset >= cardWidth * totalCards) {\r\n                    setTransitioning(false); // Interrompe a transição\r\n                    setTimeout(() => {\r\n                        setOffset(0); // Reseta para 0 após um breve atraso\r\n                        setTransitioning(true); // Retorna a transição\r\n                    }, 500); // Tempo igual ao da transição\r\n                    return prevOffset; // Mantém o offset anterior\r\n                }\r\n                return nextOffset;\r\n            });\r\n        }, 2000); // Tempo do intervalo de transição\r\n\r\n        return () => clearInterval(interval); // Limpa o intervalo ao desmontar o componente\r\n    }, [totalCards, cardWidth]);\r\n\r\n    return (\r\n        <div className=\"slider-container\">\r\n            <div\r\n                className=\"slider\"\r\n                style={{\r\n                    transform: `translateX(-${offset}px)`,\r\n                    transition: transitioning ? \"transform 0.5s ease-in-out\" : \"none\", // Controla a transição\r\n                    width: `${cardWidth * duplicatedCards.length}px`, // Largura total dos cards duplicados\r\n                }}\r\n            >\r\n                {/* Renderizando os cards duplicados */}\r\n                {duplicatedCards.map((card, index) => (\r\n                    <div className=\"slide\" key={index}>\r\n                        <h3>{card}</h3>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardSlider;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC;EACtE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAMU,SAAS,GAAG,GAAG,CAAC,CAAC;EACvB,MAAMC,UAAU,GAAGN,KAAK,CAACO,MAAM,CAAC,CAAC;;EAEjC;EACA,MAAMC,eAAe,GAAG,CAAC,GAAGR,KAAK,EAAE,GAAGA,KAAK,CAAC;EAE5CN,SAAS,CAAC,MAAM;IACZ,MAAMe,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BR,SAAS,CAAES,UAAU,IAAK;QACtB,MAAMC,UAAU,GAAGD,UAAU,GAAGN,SAAS,CAAC,CAAC;QAC3C;QACA,IAAIO,UAAU,IAAIP,SAAS,GAAGC,UAAU,EAAE;UACtCF,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;UACzBS,UAAU,CAAC,MAAM;YACbX,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACdE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;UAC5B,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;UACT,OAAOO,UAAU,CAAC,CAAC;QACvB;QACA,OAAOC,UAAU;MACrB,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAME,aAAa,CAACL,QAAQ,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACH,UAAU,EAAED,SAAS,CAAC,CAAC;EAE3B,oBACIR,OAAA;IAAKkB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAC7BnB,OAAA;MACIkB,SAAS,EAAC,QAAQ;MAClBE,KAAK,EAAE;QACHC,SAAS,EAAE,eAAejB,MAAM,KAAK;QACrCkB,UAAU,EAAEhB,aAAa,GAAG,4BAA4B,GAAG,MAAM;QAAE;QACnEiB,KAAK,EAAE,GAAGf,SAAS,GAAGG,eAAe,CAACD,MAAM,IAAI,CAAE;MACtD,CAAE;MAAAS,QAAA,EAGDR,eAAe,CAACa,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC7B1B,OAAA;QAAKkB,SAAS,EAAC,OAAO;QAAAC,QAAA,eAClBnB,OAAA;UAAAmB,QAAA,EAAKM;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK;MAAC,GADSJ,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE5B,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC5B,EAAA,CAjDID,UAAU;AAAA8B,EAAA,GAAV9B,UAAU;AAmDhB,eAAeA,UAAU;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}